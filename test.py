import random

# S = [ 0, 7, 2, 3, 6, 1, 4, 5] 
# S = [     
#  0x13,0x31,0xba,0x03,0xa9,0xb8,0x32,0x88,0x23,0xa8,0x33,0x9b,0xb9,0x28,0x91,0x98,
#  0x29,0x3b,0x3a,0x38,0x09,0x89,0x01,0x80,0x83,0x10,0xb0,0x19,0xab,0x12,0x02,0x90,
#  0xb3,0x30,0x08,0x11,0xbb,0x81,0x9a,0xa3,0xb2,0xa2,0x22,0x8b,0x20,0x1b,0x2a,0x82,
#  0x8a,0x2b,0x0a,0x1a,0xaa,0x93,0x00,0x21,0x99,0xb1,0x18,0xa0,0x0b,0xa1,0x39,0x92,
#  0x53,0x71,0xfa,0x43,0xe9,0xf8,0x72,0xc8,0x63,0xe8,0x73,0xdb,0xf9,0x68,0xd1,0xd8,
#  0x69,0x7b,0x7a,0x78,0x49,0xc9,0x41,0xc0,0xc3,0x50,0xf0,0x59,0xeb,0x52,0x42,0xd0,
#  0xf3,0x70,0x48,0x51,0xfb,0xc1,0xda,0xe3,0xf2,0xe2,0x62,0xcb,0x60,0x5b,0x6a,0xc2,
#  0xca,0x6b,0x4a,0x5a,0xea,0xd3,0x40,0x61,0xd9,0xf1,0x58,0xe0,0x4b,0xe1,0x79,0xd2,
#  0x44,0x37,0x0e,0x6c,0x3f,0x1f,0x8e,0x76,0x7d,0x26,0x2f,0x94,0x5c,0x0c,0x66,0x17,
#  0x1d,0x97,0x14,0xb6,0xac,0xcf,0x87,0x06,0x6f,0xae,0xc7,0x5f,0x24,0xc6,0x96,0xe4,
#  0xc4,0xe5,0xec,0x34,0x4e,0x0f,0x74,0xbe,0xff,0x0d,0x9d,0xf5,0xa6,0x84,0x2e,0x4d,
#  0xdf,0x05,0x6d,0x45,0x54,0xde,0x5e,0x95,0xbc,0x3e,0xad,0x46,0x47,0x7e,0x7f,0x36,
#  0xd4,0xf7,0x9f,0xbd,0x7c,0x56,0x1c,0x3d,0x27,0xa7,0x25,0x67,0xaf,0xed,0xa4,0x57,
#  0x8d,0x4f,0xf6,0xfd,0x85,0x1e,0xb5,0x65,0xa5,0x6e,0x77,0xe6,0xee,0x8f,0xd6,0x3c,
#  0x55,0xcd,0x07,0xb7,0xe7,0x64,0xcc,0x2d,0x75,0xb4,0x5d,0x2c,0x35,0x8c,0x9e,0x16,
# 0x9c,0xc5,0x86,0x15,0xfc,0x04,0xd7,0x4c,0xdd,0xce,0xd5,0xfe,0xdc,0xbf,0xf4,0xef 
#     ]
# for i in range(len(S)):
#     print('S[%d] = %d' %(i, S[i]))
# # 테이블 초기화 
# DTable = [] 
# for i in range(len(S)):
#     DTable.append( [ 0 for j in range(len(S))]) 
# # 입출력 차분표 
# for x1 in range(len(S)):
#     y1 = S[x1]
#     for dx in range(len(S)):
#         x2 = x1 ^ dx 
#         y2 = S[x2] # 함수값 확인 
#         dy = y1 ^ y2 
#         DTable[dx][dy] += 1
        

# print('    ', end='') 
# for i in range(len(S)):
#     print('%3x ' %(i), end='') 
# print('\n') 
# for dx in range(len(S)):
#     print('%3x ' %(dx), end='')
#     for dy in range(len(S)):
#         print('%3x ' %(DTable[dx][dy]), end='')
#     print('\n')


# UpAlphabet    = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
# LowerAlphabet = 'abcdefghijklmnopqrstuvwxyz'

# def caesar_encrypt(key, plain_msg):
#     cipher_msg = ''
#     for symbol in plain_msg:
#         if symbol in UpAlphabet:
#             symbol_idx = UpAlphabet.find(symbol)
#             cipher_msg = cipher_msg \
#             + UpAlphabet[(symbol_idx + key) % len(UpAlphabet)]
#         elif symbol in LowerAlphabet:
#             symbol_idx = LowerAlphabet.find(symbol)
#             cipher_msg = cipher_msg \
#             + LowerAlphabet[ (symbol_idx + key) % len(LowerAlphabet)]
#         # else:  (이 부분은 실행되지 않음)
#         #    cipher_msg = cipher_msg + symbol ( 이 부분은 실행되지 않음)
#     return cipher_msg

# plaintext = 'happy'
# key = 3
# ciphertext = caesar_encrypt(key, plaintext)
# print('PLAINTEXT  = ', plaintext)
# print('CIPHERTEXT = ', ciphertext)  


dx = 64 num_iteration = 100 counter = 0 diff_dic = {} for i in range(num_iteration):
P1 = [random.randint(0,255), random.randint(0,255), \
random.randint(0,255), random.randint(0,255)]
P2 = [P1[0]^dx , P1[1], P1[2], P1[3]] key = [1, 2, 3, 4] C1 = BC20R.BC20R_Enc(P1, key,1) C2 = BC20R.BC20R_Enc(P2, key,1) dy = [ C1[i]^C2[i] for i in range(4) ] dy_int = Common.list2int(dy) if dy_int in diff_dic :
diff_dic[dy_int].append(P1)
else:
diff_dic[dy_int] = P1
expected_dy = [0, 64, 64, 64] expected_int = Common.list2int(expected_dy) if expected_int == dy_int:
counter += 1
print('prob. =', counter/num_iteration) print(diff_dic[expected_int])
